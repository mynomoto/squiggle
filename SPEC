# Squiggle Spec 0.1
Squiggle is defined in terms of command maps. Command maps are maps with
instructions to generate SQL.

## Command Map
A command map is a Clojure map containing at least the following keys and
corresponding values.

:command
  (Required, Keyword)
  The command. Must be one of :select, :insert, :update, :delete, :create,
  :drop, :create-index. Still not implemented: :union, :intersection,
  :union-all, :alter.

:table
  (Required, {String, Keyword, Map, Vector of Strings, Keywords or Maps})
  A single table: keyword or string of the table name.
  :user
  "USER"
  A single table with alias: map with table name as key and alias as value.
  {:user :u}
  Several tables: Vector of single tables.
  [:user {:email :e}]

### :command :create
:table
  :create accepts only one table without alias.

:option
  (Optional, Keyword, Vector of keywords)
  Accepted keywords: :memory, :cached, :temporary, :global-temporary,
  :local-temporary, :temp, :if-not-exists.
  Example:
  :memory
  [:if-not-exists :global-temporary]

:column-schema
  (Required, Vector of column definitions)
  A column definition is a Clojure vector in the format
  [name type options]. E.g.:
  [:id :integer :primary-key]

  name
  (Required, {String, Keyword})
  The name of the column.

  type
  (Required, {Keyword, String})
  The datatype of the column. E.g. :varchar, "varchar(100)", :identity.

  options
  (Optional, {String, Keyword, Vector of keywords and/or strings})
  Options for the column. It can be:
  * String: "NOT-NULL UNIQUE"
  * Keyword: Accepted keywords: :primary-key, :unique, :null, :not-null
  * Vector of keywords and/or strings: [:not-null "unique"]

Example map:
{:command :create
 :table :user
 :column-schema [[:id :identity [:primary-key]]]
 :option :if-not-exists}

### :command :drop
:table
  :drop accepts one or more tables without alias.
  Examples:
  :user
  [:user :email]

:option
  (Optional, Keyword, Vector of keywords)
  Accepted keyworks: :cascade, :restrict, :if-exists
  Examples:
  :if-exists
  [:if-exists :restrict]

Example map:
{:command :drop
 :table :user
 :option :if-exists}

### :command :insert
:table
  :insert accepts only one table.

:column
  (Optional, required with :value (but shouldn't be), {String, Keyword,
  Vector of keywords and/or strings})
  The names of the columns that will be inserted.

:value
  (Optional, Vector of vectors)
  Each vector is a row to be inserted.

:select
  (Optional, select command map)
  To insert the results of a select.

Example map:
{:command :insert
 :table :user
 :column [:username :password]
 :value [["m" "mistery"]
         ["a" "passwd"]
         ["s" "111111"]]}

### :command :delete
:table
  :delete accepts only one table without alias.

:where
  (Optional, Vector of Expressions)
  Vector of where expressions. Operators are used in keyword form and vectors
  delimit operations like parentesis in Clojure. E.g.: [:and [:and [:> :a 3]
  [:<= :d 3] [:between :d [:and 2 5]]] [:or [:> :d :a] [:< :a :d]]
  [:in :x [3 4 9]]

### :command :update
:table
  :update accepts only one table.

:set
  (Required, Vector of Expressions)
  Vector of set expressions (like where expressions, has the same syntax).

:where
  (Optional, Vector of Expressions)
  Vector of where expressions. Operators are used in keyword form and vectors
  delimit operations like parentesis in Clojure. E.g.: [:and [:and [:> :a 3]
  [:<= :d 3] [:between :d [:and 2 5]]] [:or [:> :d :a] [:< :a :d]]
  [:in :x [3 4 9]]

### :command :select
:table
  :select accepts one or more tables.

:column
  :select accepts one or more columns including expressions.

:modifier
  (Optional, {String, Keyword, Modifier map, Vector of modifiers})
  Modifiers to apply to the query. Accepts the following keywords: :distinct,
  :distinct-on and :top. Keyworks that accepts options must be used as a
  key in a map with options as values.
  :distinct, {:top 10}, {:distinct-on [:username :role]}

:where
  (Optional, Vector of Expressions)
  Vector of where expressions. Operators are used in keyword form and vectors
  delimit operations like parentesis in Clojure. E.g.: [:and [:and [:> :a 3]
  [:<= :d 3] [:between :d [:and 2 5]]] [:or [:> :d :a] [:< :a :d]]
  [:in :x [3 4 9]]

:group-by
  (Optional, Vector of Keywords, Keyword, String)
  Columns for grouping.

:having
  (Optional, Vector of Expressions)
  Vector of having expressions. Operators are used in keyword form and vectors
  delimit operations like parentesis in Clojure. E.g.: [:and [:and [:> :a 3]
  [:<= :d 3] [:between :d [:and 2 5]]] [:or [:> :d :a] [:< :a :d]]
  [:in :x [3 4 9]]

:offset
  (Optional, Integer)
  The number of rows to offset.

:limit
  (Optional, Integer)
  The number of rows to limit.

:order-by
  (Optional, Vector of Keywords)
  Columns used to order the result.

